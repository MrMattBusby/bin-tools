#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
"""Show all common number bases for an input and/or its en/decoding.

License
-------
See below __license__

Usage
-----
  - $conv 100
  - $conv 0x100
  - $conv ffff
  - $conv -1.25
  - $conv 'FooBar'
  - $conv '\u2660'

Warning
-------
Your terminal must support UTF-8 to use this script

"""
from __future__ import print_function

__creator__ = "Matt Busby"
__email__ = "@MrMattBusby"
__date__ = "01/2014"  # Created originally as 'eq'
__author__ = "{0} {1}".format(__creator__, __email__)
__copyright__ = "Copyright (c) {year}, {owner}. ".format(
                        owner = __author__,
                        year = "2014-2016") + \
                   "All rights reserved."
__licence__ = """\
        BSD 3-Clause License

        {copyright}

        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions
        are met:

        1. Redistributions of source code must retain the above copyright
           notice, this list of conditions and the following disclaimer.

        2. Redistributions in binary form must reproduce the above copyright
           notice, this list of conditions and the following disclaimer in
           the documentation and/or other materials provided with the
           distribution.

        3. Neither the name of the copyright holder nor the names of its
           contributors may be used to endorse or promote products derived
           from this software without specific prior written permission.

        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
        FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
        COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
        INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
        BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
        WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
        POSSIBILITY OF SUCH DAMAGE.
        """.format(copyright=__copyright__)
__version__ = "See git history" # <-- All future
#__version__ = "2.2" # negatives
#__version__ = "2.1" # floats
#__version__ = "2.0" # return bytes
#__version__ = "1.5" # print unicode str
#__version__ = "1.4" # to_bytes
#__version__ = "1.3" # unicode-escape
#__version__ = "1.2" # bytes
#__version__ = "1.1" # str
#__version__ = "1.0" # bin oct dec hex

import sys
import struct

def pfloat(instr, num):
    """Print float"""
    bytes_ = struct.pack('>d', num)
    print("{}\t{}\t{}:0x{}\t'{}':0x{}\t{}:{}".format(num, num.hex(),
        bytes_, bytes_.hex(),
        instr, instr.encode().hex(), instr.encode(), instr.encode().hex()))
    return

def pint(instr, num):
    """Print integer"""
    try:
        ch = chr(num)
    except (ValueError, OverflowError):
        ch = ''
    bytes_ = struct.pack('>q', num)
    # bin oct dec hex dec_str hex_str bytes chr_unicode
    print("{0:#b}\t{0:#o}\t{0:#d}\t{0:#x}\t".format(num) +
          "'{}':0x{}\t'{}':0x{}\t{}{}\t".format(
              str(num), str(num).encode().hex(),
                  instr, instr.encode().hex(),
                  ('','-')[num < 0],
                  abs(num).to_bytes(8, 'big').lstrip(b'\0')) +
          "'{}' '{}':0x{}".format(ch, bytes_, bytes_.hex()))
    return bytes_

def pstr(instr):
    """Print string"""
    bytes_ = instr.encode()
    print("'{}'\t{}\t0x{}\t'{}'".format(
          instr, bytes_, bytes_.hex(),
          bytes(instr, 'utf-8').decode('unicode-escape')))
    return bytes_

def conv(instr):
    """Converter"""
    try:
        num = int(instr, 0)
    except ValueError:
        # Perhaps '0x', '0o', '0b', was omitted
        try:
            num = int(instr, 16)
        except ValueError:
            try:
                num = int(instr, 8)
            except ValueError:
                try:
                    num = int(instr, 2)
                except ValueError:
                    try:
                        num = float(instr)
                    except ValueError:
                        # Can't convert, just print string/encoding
                        return pstr(instr)
                    else:
                        # Float
                        return pfloat(instr, num)
    # Int
    return pint(instr, num)

if __name__ == '__main__':
    for instr in sys.argv[1:]:
        if instr in ('-h', '--help'):
            print(__doc__, file=sys.stderr)
            sys.exit(0)
        elif instr == '-':
            for each in sys.stdin.readlines():
                conv(each.rstrip())
        else:
            conv(instr)

